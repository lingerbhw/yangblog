{"version":3,"file":"../sw.js","names":["precacheConfig","cacheName","self","registration","scope","firstRegister","ignoreUrlParametersMatching","addDirectoryIndex","originalUrl","index","url","URL","pathname","slice","toString","cleanResponse","originalResponse","redirected","Promise","resolve","body","blob","then","Response","headers","status","statusText","createCacheKey","paramName","paramValue","dontCacheBustUrlsMatching","match","search","encodeURIComponent","isPathWhitelisted","whitelist","absoluteUrlString","length","path","some","whitelistedPathRegex","stripIgnoredUrlParameters","hash","split","map","kv","filter","every","ignoredRegex","test","join","hashParamName","urlsToCacheKeys","Map","item","relativeUrl","absoluteUrl","location","cacheKey","setOfCachedUrls","cache","keys","requests","request","urls","Set","addEventListener","event","waitUntil","caches","open","cachedUrls","all","Array","from","values","has","Request","credentials","fetch","response","ok","Error","responseToCache","put","skipWaiting","setOfExpectedUrls","existingRequests","existingRequest","delete","clients","claim","matchAll","forEach","client","postMessage","method","shouldRespond","directoryIndex","respondWith","get","catch","e","console","warn"],"sources":["sw.js"],"mappings":"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","sourcesContent":["/**\n * 自动引入模板，在原有 sw-precache 插件默认模板基础上做的二次开发\n *\n * 因为是自定导入的模板，项目一旦生成，不支持随 sw-precache 的版本自动升级。\n * 可以到 Lavas 官网下载 basic 模板内获取最新模板进行替换\n *\n */\n\n/* eslint-disable */\n\n'use strict';\n\nvar precacheConfig = [[\"/404/index.html\",\"e528cd23ded4c6b0ee09a4a5b07cf5d7\"],[\"/archives/2022/09/index.html\",\"836269634d652e3c856a392b0ae92163\"],[\"/archives/2022/10/index.html\",\"d55b854a9ac448d0d020ab16b1ed53f6\"],[\"/archives/2022/index.html\",\"dda836e5886f842673a24c12cee6b1d1\"],[\"/archives/index.html\",\"cdfecd8f749a0bba84c4bc9d80abb74e\"],[\"/categories/index.html\",\"cfbae638e5676c3e35fc447bfe43c08b\"],[\"/categories/随笔/index.html\",\"c920d121560ccc83ee5145d0172c445f\"],[\"/css/Readme.html\",\"c1421c18e077ab9a9582161d9197e693\"],[\"/css/custom.css\",\"512f2c6f673fc32883ce233587af9a42\"],[\"/css/first.css\",\"6cb944f61b3af06138fb2d6fe4542beb\"],[\"/css/style.css\",\"28636a3694aa0d2d57d309be01d94445\"],[\"/fcircle/index.html\",\"7bbc91c62582dcfb83d70d642cf9e1bf\"],[\"/friends/index.html\",\"731165b8b3d4717ec020ff0757e3cb5c\"],[\"/index.html\",\"eca6b809e1bc4c398752763ad44fa0a8\"],[\"/js/app.js\",\"2094e03b6dcf440131e56ce23644f71d\"],[\"/js/plugins/aplayer.js\",\"dbe5eea968969672c52022ed895192a0\"],[\"/js/plugins/parallax.js\",\"8bf0ab10d50243ae87016af576642cdc\"],[\"/js/plugins/rightMenu.js\",\"d9437285263079b1158df42384235b71\"],[\"/js/plugins/rightMenus.js\",\"80d861b1e0937ebecf188793f3705a3a\"],[\"/js/plugins/tags/contributors.js\",\"aec8045335d2753a39a48c34fb019662\"],[\"/js/plugins/tags/friends.js\",\"f372da57b83083859f60ce19b736a695\"],[\"/js/plugins/tags/sites.js\",\"76bf19b80414fbce774acddabf6b1d3e\"],[\"/js/search/hexo.js\",\"8594665377e48c3b406b0149264ebf2d\"],[\"/sw-register.js\",\"cfb48f1b2da48809723fd13ab08b48fc\"],[\"/tags/index.html\",\"2a4c2de8bc5dc9bec381529f0b651296\"],[\"/tags/久别/index.html\",\"58e4aac1cbc59a1c6275a57e2c67314c\"],[\"/tags/人生/index.html\",\"4043ed68bed6e9338238c6bf59e54f37\"],[\"/tags/倒序/index.html\",\"2c8a5ec6eb041897f71a1cb5d300e169\"],[\"/tags/生活/index.html\",\"9d7b3fe4578dee1a973d6d06817f4b1f\"],[\"/tags/随笔/index.html\",\"ee38cfa53ae12a31570db3fdf7bb56fe\"]];\nvar cacheName = 'sw-precache-v3--' + (self.registration ? self.registration.scope : '');\nvar firstRegister = 1; // 默认1是首次安装SW， 0是SW更新\n\n\nvar ignoreUrlParametersMatching = [/^utm_/];\n\n\nvar addDirectoryIndex = function (originalUrl, index) {\n    var url = new URL(originalUrl);\n    if (url.pathname.slice(-1) === '/') {\n        url.pathname += index;\n    }\n    return url.toString();\n};\n\nvar cleanResponse = function (originalResponse) {\n    // 如果没有重定向响应，不需干啥\n    if (!originalResponse.redirected) {\n        return Promise.resolve(originalResponse);\n    }\n\n    // Firefox 50 及以下不知处 Response.body 流, 所以我们需要读取整个body以blob形式返回。\n    var bodyPromise = 'body' in originalResponse ?\n        Promise.resolve(originalResponse.body) :\n        originalResponse.blob();\n\n    return bodyPromise.then(function (body) {\n        // new Response() 可同时支持 stream or Blob.\n        return new Response(body, {\n            headers: originalResponse.headers,\n            status: originalResponse.status,\n            statusText: originalResponse.statusText\n        });\n    });\n};\n\nvar createCacheKey = function (originalUrl, paramName, paramValue,\n    dontCacheBustUrlsMatching) {\n\n    // 创建一个新的URL对象，避免影响原始URL\n    var url = new URL(originalUrl);\n\n    // 如果 dontCacheBustUrlsMatching 值没有设置，或是没有匹配到，将值拼接到url.serach后\n    if (!dontCacheBustUrlsMatching ||\n        !(url.pathname.match(dontCacheBustUrlsMatching))) {\n        url.search += (url.search ? '&' : '') +\n            encodeURIComponent(paramName) + '=' + encodeURIComponent(paramValue);\n    }\n\n    return url.toString();\n};\n\nvar isPathWhitelisted = function (whitelist, absoluteUrlString) {\n    // 如果 whitelist 是空数组，则认为全部都在白名单内\n    if (whitelist.length === 0) {\n        return true;\n    }\n\n    // 否则逐个匹配正则匹配并返回\n    var path = (new URL(absoluteUrlString)).pathname;\n    return whitelist.some(function (whitelistedPathRegex) {\n        return path.match(whitelistedPathRegex);\n    });\n};\n\nvar stripIgnoredUrlParameters = function (originalUrl,\n    ignoreUrlParametersMatching) {\n    var url = new URL(originalUrl);\n    // 移除 hash; 查看 https://github.com/GoogleChrome/sw-precache/issues/290\n    url.hash = '';\n\n    url.search = url.search.slice(1) // 是否包含 '?'\n        .split('&') // 分割成数组 'key=value' 的形式\n        .map(function (kv) {\n            return kv.split('='); // 分割每个 'key=value' 字符串成 [key, value] 形式\n        })\n        .filter(function (kv) {\n            return ignoreUrlParametersMatching.every(function (ignoredRegex) {\n                return !ignoredRegex.test(kv[0]); // 如果 key 没有匹配到任何忽略参数正则，就 Return true\n            });\n        })\n        .map(function (kv) {\n            return kv.join('='); // 重新把 [key, value] 格式转换为 'key=value' 字符串\n        })\n        .join('&'); // 将所有参数 'key=value' 以 '&' 拼接\n\n    return url.toString();\n};\n\n\nvar addDirectoryIndex = function (originalUrl, index) {\n    var url = new URL(originalUrl);\n    if (url.pathname.slice(-1) === '/') {\n        url.pathname += index;\n    }\n    return url.toString();\n};\n\nvar hashParamName = '_sw-precache';\nvar urlsToCacheKeys = new Map(\n    precacheConfig.map(function (item) {\n        var relativeUrl = item[0];\n        var hash = item[1];\n        var absoluteUrl = new URL(relativeUrl, self.location);\n        var cacheKey = createCacheKey(absoluteUrl, hashParamName, hash, false);\n        return [absoluteUrl.toString(), cacheKey];\n    })\n);\n\nfunction setOfCachedUrls(cache) {\n    return cache.keys().then(function (requests) {\n        // 如果原cacheName中没有缓存任何收，就默认是首次安装，否则认为是SW更新\n        if (requests && requests.length > 0) {\n            firstRegister = 0; // SW更新\n        }\n        return requests.map(function (request) {\n            return request.url;\n        });\n    }).then(function (urls) {\n        return new Set(urls);\n    });\n}\n\nself.addEventListener('install', function (event) {\n    event.waitUntil(\n        caches.open(cacheName).then(function (cache) {\n            return setOfCachedUrls(cache).then(function (cachedUrls) {\n                return Promise.all(\n                    Array.from(urlsToCacheKeys.values()).map(function (cacheKey) {\n                        // 如果缓存中没有匹配到cacheKey，添加进去\n                        if (!cachedUrls.has(cacheKey)) {\n                            var request = new Request(cacheKey, { credentials: 'same-origin' });\n                            return fetch(request).then(function (response) {\n                                // 只要返回200才能继续，否则直接抛错\n                                if (!response.ok) {\n                                    throw new Error('Request for ' + cacheKey + ' returned a ' +\n                                        'response with status ' + response.status);\n                                }\n\n                                return cleanResponse(response).then(function (responseToCache) {\n                                    return cache.put(cacheKey, responseToCache);\n                                });\n                            });\n                        }\n                    })\n                );\n            });\n        })\n            .then(function () {\n            \n            // 强制 SW 状态 installing -> activate\n            return self.skipWaiting();\n            \n        })\n    );\n});\n\nself.addEventListener('activate', function (event) {\n    var setOfExpectedUrls = new Set(urlsToCacheKeys.values());\n\n    event.waitUntil(\n        caches.open(cacheName).then(function (cache) {\n            return cache.keys().then(function (existingRequests) {\n                return Promise.all(\n                    existingRequests.map(function (existingRequest) {\n                        // 删除原缓存中相同键值内容\n                        if (!setOfExpectedUrls.has(existingRequest.url)) {\n                            return cache.delete(existingRequest);\n                        }\n                    })\n                );\n            });\n        }).then(function () {\n            \n            return self.clients.claim();\n            \n        }).then(function () {\n                // 如果是首次安装 SW 时, 不发送更新消息（是否是首次安装，通过指定cacheName 中是否有缓存信息判断）\n                // 如果不是首次安装，则是内容有更新，需要通知页面重载更新\n                if (!firstRegister) {\n                    return self.clients.matchAll()\n                        .then(function (clients) {\n                            if (clients && clients.length) {\n                                clients.forEach(function (client) {\n                                    client.postMessage('sw.update');\n                                })\n                            }\n                        })\n                }\n            })\n    );\n});\n\n\n\n    self.addEventListener('fetch', function (event) {\n        if (event.request.method === 'GET') {\n\n            // 是否应该 event.respondWith()，需要我们逐步的判断\n            // 而且也方便了后期做特殊的特殊\n            var shouldRespond;\n\n\n            // 首先去除已配置的忽略参数及hash\n            // 查看缓存简直中是否包含该请求，包含就将shouldRespond 设为true\n            var url = stripIgnoredUrlParameters(event.request.url, ignoreUrlParametersMatching);\n            shouldRespond = urlsToCacheKeys.has(url);\n\n            // 如果 shouldRespond 是 false, 我们在url后默认增加 'index.html'\n            // (或者是你在配置文件中自行配置的 directoryIndex 参数值)，继续查找缓存列表\n            var directoryIndex = 'index.html';\n            if (!shouldRespond && directoryIndex) {\n                url = addDirectoryIndex(url, directoryIndex);\n                shouldRespond = urlsToCacheKeys.has(url);\n            }\n\n            // 如果 shouldRespond 仍是 false，检查是否是navigation\n            // request， 如果是的话，判断是否能与 navigateFallbackWhitelist 正则列表匹配\n            var navigateFallback = '';\n            if (!shouldRespond &&\n                navigateFallback &&\n                (event.request.mode === 'navigate') &&\n                isPathWhitelisted([], event.request.url)\n            ) {\n                url = new URL(navigateFallback, self.location).toString();\n                shouldRespond = urlsToCacheKeys.has(url);\n            }\n\n            // 如果 shouldRespond 被置为 true\n            // 则 event.respondWith()匹配缓存返回结果，匹配不成就直接请求.\n            if (shouldRespond) {\n                event.respondWith(\n                    caches.open(cacheName).then(function (cache) {\n                        return cache.match(urlsToCacheKeys.get(url)).then(function (response) {\n                            if (response) {\n                                return response;\n                            }\n                            throw Error('The cached response that was expected is missing.');\n                        });\n                    }).catch(function (e) {\n                        // 如果捕获到异常错误，直接返回 fetch() 请求资源\n                        console.warn('Couldn\\'t serve response for \"%s\" from cache: %O', event.request.url, e);\n                        return fetch(event.request);\n                    })\n                );\n            }\n        }\n    });\n\n\n\n\n\n\n\n\n\n/* eslint-enable */\n"]}